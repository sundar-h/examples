// Code generated by cmd/cgo; DO NOT EDIT.

//line echo.go:1:1
package sdk; import _cgo_unsafe "unsafe"

// 查看中间代码: go tool cgo echo.go

import (
	"bytes"
	"fmt"
	"unsafe"
)

/*
#include <stdlib.h>
#include <string.h>

// C 定义转换 Go 定义
// go tool cgo -godefs sdk/echo.go
//type CPeople struct {
//	Name            *int8
//	Payload         *int8
//	Byte            *uint8
//	Age             int32
//	Pad_cgo_0       [4]byte // C和Golang结构体并不是一一对应的, 会有一些字节对齐的填充字段
//}

extern struct GPeople gp;

// go tool cgo -godefs sdk/echo.go
typedef struct People {
    char* name;
    unsigned char* content;
    char* payload;
    int age;
} People;

static inline void free_people(People* p) {
    free(p->name);
    free(p->payload);
    free(p);
}

static inline People* new_people() {
	People *p;
	p = malloc(sizeof(*p));
	return p;
}

static inline int len_of_uchar(unsigned char* data) {
	return strlen((char*)data);
}
 */
import _ "unsafe"


type GPeople struct {
	Name    string
	Content []byte
	Payload string
	Age     int
}


func fromCBytes(cBytes * /*line :62:25*/_Ctype_uchar /*line :62:32*/) []byte{
	return func() []byte{ _cgo0 := /*line :63:19*/unsafe.Pointer(cBytes); var _cgo1 _Ctype_int = _Cfunc_len_of_uchar(cBytes); _cgoCheckPointer(_cgo0, nil); return _Cfunc_GoBytes(_cgo0, _cgo1); }()
}

func FromCPeople(p * /*line :66:21*/_Ctype_struct_People /*line :66:36*/) *GPeople {
	return &GPeople{
		Name:    ( /*line :68:12*/_Cfunc_GoString /*line :68:21*/)(p.name),
		Age:    int(p.age),
		Content: fromCBytes(p.content),
		Payload:    ( /*line :71:15*/_Cfunc_GoString /*line :71:24*/)(p.payload),
	}
}

//复制副本(到C语言空间)的方式
func (p GPeople) ToCPeople() * /*line :76:31*/_Ctype_struct_People /*line :76:46*/ {
	//C.free(unsafe.Pointer(fr))
	// 哪里定义，哪里负责初始化
	p2 := ( /*line :79:8*/_Cfunc_new_people /*line :79:19*/)()
	p2.name = ( /*line :80:12*/_Cfunc_CString /*line :80:20*/)(p.Name)
	p2.age =  /*line :81:11*/_Ctype_int /*line :81:16*/(p.Age)
	p2.content = (* /*line :82:17*/_Ctype_uchar /*line :82:24*/)(func() _cgo_unsafe.Pointer{ _cgo0 := /*line :82:35*/p.Content; _cgoCheckPointer(_cgo0, nil); return _Cfunc_CBytes(_cgo0); }())
	p2.payload = ( /*line :83:15*/_Cfunc_CString /*line :83:23*/)(p.Payload)
	return p2
}

type Echoer interface {
	Echo(*GPeople)
}

func Register(e Echoer) {
	instance = e
}

var instance Echoer

//export Echo
func Echo(p * /*line :98:14*/_Ctype_struct_People /*line :98:29*/) * /*line :98:32*/_Ctype_struct_People /*line :98:47*/ {
	if instance == nil {
		fmt.Println("Echo Argument nil")
		return nil
	}
	defer func() func() { _cgo0 := /*line :103:22*/p; return func() { _cgoCheckPointer(_cgo0, nil); _Cfunc_free_people(_cgo0); }}()()

	instance.Echo(FromCPeople(p))

	return GPeople{
		Name:    "From_Go_Name",
		Payload: "From_go_Payload",
		Content: bytes.NewBufferString("From_Go_Content").Bytes(),
		Age:     666,
	}.ToCPeople()
}