/* automatically generated by rust-bindgen 0.59.1 */

extern "C" {
    pub fn init(config: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn language_type() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn plugin_type() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn name() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn info() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn send(payload: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn next() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Config {
    pub name: *mut ::std::os::raw::c_char,
    pub lang_type: *mut ::std::os::raw::c_char,
    pub plugin_type: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Config() {
    assert_eq!(
        ::std::mem::size_of::<Config>(),
        24usize,
        concat!("Size of: ", stringify!(Config))
    );
    assert_eq!(
        ::std::mem::align_of::<Config>(),
        8usize,
        concat!("Alignment of ", stringify!(Config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Config>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Config),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Config>())).lang_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Config),
            "::",
            stringify!(lang_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Config>())).plugin_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Config),
            "::",
            stringify!(plugin_type)
        )
    );
}
