{"message":"the name `Future` is defined multiple times","code":{"code":"E0252","explanation":"Two items of the same name cannot be imported without rebinding one of the\nitems under a new local name.\n\nErroneous code example:\n\n```compile_fail,E0252\nuse foo::baz;\nuse bar::baz; // error, do `use bar::baz as quux` instead\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse foo::baz as foo_baz;\nuse bar::baz; // ok!\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nOr you can reference the item with its parent:\n\n```\nuse bar::baz;\n\nfn main() {\n    let x = foo::baz; // ok!\n}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n"},"level":"error","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1149,"byte_end":1163,"line_start":42,"line_end":42,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},","highlight_start":5,"highlight_end":19}],"label":"`Future` reimported here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":67,"byte_end":73,"line_start":3,"line_end":3,"column_start":15,"column_end":21,"is_primary":false,"text":[{"text":"use futures::{Future, lock::Mutex};","highlight_start":15,"highlight_end":21}],"label":"previous import of the trait `Future` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Future` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove unnecessary import","code":null,"level":"help","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1149,"byte_end":1165,"line_start":42,"line_end":42,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0252]\u001b[0m\u001b[0m\u001b[1m: the name `Future` is defined multiple times\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:42:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse futures::{Future, lock::Mutex};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mprevious import of the trait `Future` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Future` reimported here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove unnecessary import\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Future` must be defined only once in the type namespace of this module\u001b[0m\n\n"}
{"message":"the name `Arc` is defined multiple times","code":{"code":"E0252","explanation":"Two items of the same name cannot be imported without rebinding one of the\nitems under a new local name.\n\nErroneous code example:\n\n```compile_fail,E0252\nuse foo::baz;\nuse bar::baz; // error, do `use bar::baz as quux` instead\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse foo::baz as foo_baz;\nuse bar::baz; // ok!\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nOr you can reference the item with its parent:\n\n```\nuse bar::baz;\n\nfn main() {\n    let x = foo::baz; // ok!\n}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n"},"level":"error","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1198,"byte_end":1201,"line_start":42,"line_end":42,"column_start":54,"column_end":57,"is_primary":true,"text":[{"text":"    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},","highlight_start":54,"highlight_end":57}],"label":"`Arc` reimported here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":20,"byte_end":29,"line_start":1,"line_end":1,"column_start":21,"column_end":30,"is_primary":false,"text":[{"text":"use std::{pin::Pin, sync::Arc, task::Poll, thread};","highlight_start":21,"highlight_end":30}],"label":"previous import of the type `Arc` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Arc` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove unnecessary import","code":null,"level":"help","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1198,"byte_end":1203,"line_start":42,"line_end":42,"column_start":54,"column_end":59,"is_primary":true,"text":[{"text":"    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},","highlight_start":54,"highlight_end":59}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0252]\u001b[0m\u001b[0m\u001b[1m: the name `Arc` is defined multiple times\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:42:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::{pin::Pin, sync::Arc, task::Poll, thread};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mprevious import of the type `Arc` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Arc` reimported here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove unnecessary import\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Arc` must be defined only once in the type namespace of this module\u001b[0m\n\n"}
{"message":"the name `Mutex` is defined multiple times","code":{"code":"E0252","explanation":"Two items of the same name cannot be imported without rebinding one of the\nitems under a new local name.\n\nErroneous code example:\n\n```compile_fail,E0252\nuse foo::baz;\nuse bar::baz; // error, do `use bar::baz as quux` instead\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse foo::baz as foo_baz;\nuse bar::baz; // ok!\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nOr you can reference the item with its parent:\n\n```\nuse bar::baz;\n\nfn main() {\n    let x = foo::baz; // ok!\n}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n"},"level":"error","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1203,"byte_end":1208,"line_start":42,"line_end":42,"column_start":59,"column_end":64,"is_primary":true,"text":[{"text":"    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},","highlight_start":59,"highlight_end":64}],"label":"`Mutex` reimported here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":75,"byte_end":86,"line_start":3,"line_end":3,"column_start":23,"column_end":34,"is_primary":false,"text":[{"text":"use futures::{Future, lock::Mutex};","highlight_start":23,"highlight_end":34}],"label":"previous import of the type `Mutex` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Mutex` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `as` to change the binding name of the import","code":null,"level":"help","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1203,"byte_end":1208,"line_start":42,"line_end":42,"column_start":59,"column_end":64,"is_primary":true,"text":[{"text":"    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},","highlight_start":59,"highlight_end":64}],"label":null,"suggested_replacement":"Mutex as OtherMutex","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0252]\u001b[0m\u001b[0m\u001b[1m: the name `Mutex` is defined multiple times\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:42:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse futures::{Future, lock::Mutex};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mprevious import of the type `Mutex` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Mutex` reimported here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Mutex` must be defined only once in the type namespace of this module\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can use `as` to change the binding name of the import\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    future::Future, sync::{ mpsc::{channel, Sender}, Arc, \u001b[0m\u001b[0m\u001b[38;5;10mMutex as OtherMutex\u001b[0m\u001b[0m, Condvar},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"the name `Poll` is defined multiple times","code":{"code":"E0252","explanation":"Two items of the same name cannot be imported without rebinding one of the\nitems under a new local name.\n\nErroneous code example:\n\n```compile_fail,E0252\nuse foo::baz;\nuse bar::baz; // error, do `use bar::baz as quux` instead\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse foo::baz as foo_baz;\nuse bar::baz; // ok!\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nOr you can reference the item with its parent:\n\n```\nuse bar::baz;\n\nfn main() {\n    let x = foo::baz; // ok!\n}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n"},"level":"error","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1240,"byte_end":1244,"line_start":43,"line_end":43,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"    task::{Context, Poll, RawWaker, RawWakerVTable, Waker}, mem, pin::Pin,","highlight_start":21,"highlight_end":25}],"label":"`Poll` reimported here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":31,"byte_end":41,"line_start":1,"line_end":1,"column_start":32,"column_end":42,"is_primary":false,"text":[{"text":"use std::{pin::Pin, sync::Arc, task::Poll, thread};","highlight_start":32,"highlight_end":42}],"label":"previous import of the type `Poll` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Poll` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove unnecessary import","code":null,"level":"help","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1240,"byte_end":1246,"line_start":43,"line_end":43,"column_start":21,"column_end":27,"is_primary":true,"text":[{"text":"    task::{Context, Poll, RawWaker, RawWakerVTable, Waker}, mem, pin::Pin,","highlight_start":21,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0252]\u001b[0m\u001b[0m\u001b[1m: the name `Poll` is defined multiple times\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:43:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::{pin::Pin, sync::Arc, task::Poll, thread};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mprevious import of the type `Poll` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    task::{Context, Poll, RawWaker, RawWakerVTable, Waker}, mem, pin::Pin,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Poll` reimported here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove unnecessary import\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Poll` must be defined only once in the type namespace of this module\u001b[0m\n\n"}
{"message":"the name `Pin` is defined multiple times","code":{"code":"E0252","explanation":"Two items of the same name cannot be imported without rebinding one of the\nitems under a new local name.\n\nErroneous code example:\n\n```compile_fail,E0252\nuse foo::baz;\nuse bar::baz; // error, do `use bar::baz as quux` instead\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse foo::baz as foo_baz;\nuse bar::baz; // ok!\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nOr you can reference the item with its parent:\n\n```\nuse bar::baz;\n\nfn main() {\n    let x = foo::baz; // ok!\n}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n"},"level":"error","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1285,"byte_end":1293,"line_start":43,"line_end":43,"column_start":66,"column_end":74,"is_primary":true,"text":[{"text":"    task::{Context, Poll, RawWaker, RawWakerVTable, Waker}, mem, pin::Pin,","highlight_start":66,"highlight_end":74}],"label":"`Pin` reimported here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":10,"byte_end":18,"line_start":1,"line_end":1,"column_start":11,"column_end":19,"is_primary":false,"text":[{"text":"use std::{pin::Pin, sync::Arc, task::Poll, thread};","highlight_start":11,"highlight_end":19}],"label":"previous import of the type `Pin` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Pin` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove unnecessary import","code":null,"level":"help","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1285,"byte_end":1294,"line_start":43,"line_end":43,"column_start":66,"column_end":75,"is_primary":true,"text":[{"text":"    task::{Context, Poll, RawWaker, RawWakerVTable, Waker}, mem, pin::Pin,","highlight_start":66,"highlight_end":75}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0252]\u001b[0m\u001b[0m\u001b[1m: the name `Pin` is defined multiple times\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:43:66\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::{pin::Pin, sync::Arc, task::Poll, thread};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mprevious import of the type `Pin` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    task::{Context, Poll, RawWaker, RawWakerVTable, Waker}, mem, pin::Pin,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Pin` reimported here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove unnecessary import\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Pin` must be defined only once in the type namespace of this module\u001b[0m\n\n"}
{"message":"the name `thread` is defined multiple times","code":{"code":"E0252","explanation":"Two items of the same name cannot be imported without rebinding one of the\nitems under a new local name.\n\nErroneous code example:\n\n```compile_fail,E0252\nuse foo::baz;\nuse bar::baz; // error, do `use bar::baz as quux` instead\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse foo::baz as foo_baz;\nuse bar::baz; // ok!\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nOr you can reference the item with its parent:\n\n```\nuse bar::baz;\n\nfn main() {\n    let x = foo::baz; // ok!\n}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n"},"level":"error","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1308,"byte_end":1312,"line_start":44,"line_end":44,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"    thread::{self, JoinHandle}, time::{Duration, Instant}, collections::HashMap","highlight_start":14,"highlight_end":18}],"label":"`thread` reimported here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":43,"byte_end":49,"line_start":1,"line_end":1,"column_start":44,"column_end":50,"is_primary":false,"text":[{"text":"use std::{pin::Pin, sync::Arc, task::Poll, thread};","highlight_start":44,"highlight_end":50}],"label":"previous import of the module `thread` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`thread` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove unnecessary import","code":null,"level":"help","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1308,"byte_end":1314,"line_start":44,"line_end":44,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"    thread::{self, JoinHandle}, time::{Duration, Instant}, collections::HashMap","highlight_start":14,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0252]\u001b[0m\u001b[0m\u001b[1m: the name `thread` is defined multiple times\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:44:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::{pin::Pin, sync::Arc, task::Poll, thread};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mprevious import of the module `thread` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    thread::{self, JoinHandle}, time::{Duration, Instant}, collections::HashMap\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`thread` reimported here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove unnecessary import\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `thread` must be defined only once in the type namespace of this module\u001b[0m\n\n"}
{"message":"unused imports: `Arc`, `Mutex`, `Poll`, `future::Future`, `pin::Pin`, `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1149,"byte_end":1163,"line_start":42,"line_end":42,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1198,"byte_end":1201,"line_start":42,"line_end":42,"column_start":54,"column_end":57,"is_primary":true,"text":[{"text":"    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},","highlight_start":54,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1203,"byte_end":1208,"line_start":42,"line_end":42,"column_start":59,"column_end":64,"is_primary":true,"text":[{"text":"    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},","highlight_start":59,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1240,"byte_end":1244,"line_start":43,"line_end":43,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"    task::{Context, Poll, RawWaker, RawWakerVTable, Waker}, mem, pin::Pin,","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1285,"byte_end":1293,"line_start":43,"line_end":43,"column_start":66,"column_end":74,"is_primary":true,"text":[{"text":"    task::{Context, Poll, RawWaker, RawWakerVTable, Waker}, mem, pin::Pin,","highlight_start":66,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1308,"byte_end":1312,"line_start":44,"line_end":44,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"    thread::{self, JoinHandle}, time::{Duration, Instant}, collections::HashMap","highlight_start":14,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1149,"byte_end":1165,"line_start":42,"line_end":42,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1196,"byte_end":1208,"line_start":42,"line_end":42,"column_start":52,"column_end":64,"is_primary":true,"text":[{"text":"    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},","highlight_start":52,"highlight_end":64}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1238,"byte_end":1244,"line_start":43,"line_end":43,"column_start":19,"column_end":25,"is_primary":true,"text":[{"text":"    task::{Context, Poll, RawWaker, RawWakerVTable, Waker}, mem, pin::Pin,","highlight_start":19,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1283,"byte_end":1293,"line_start":43,"line_end":43,"column_start":64,"column_end":74,"is_primary":true,"text":[{"text":"    task::{Context, Poll, RawWaker, RawWakerVTable, Waker}, mem, pin::Pin,","highlight_start":64,"highlight_end":74}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1308,"byte_end":1314,"line_start":44,"line_end":44,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"    thread::{self, JoinHandle}, time::{Duration, Instant}, collections::HashMap","highlight_start":14,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Arc`, `Mutex`, `Poll`, `future::Future`, `pin::Pin`, `self`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:42:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    future::Future, sync::{ mpsc::{channel, Sender}, Arc, Mutex, Condvar},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    task::{Context, Poll, RawWaker, RawWakerVTable, Waker}, mem, pin::Pin,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    thread::{self, JoinHandle}, time::{Duration, Instant}, collections::HashMap\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"no method named `unwrap` found for struct `MutexLockFuture` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1591,"byte_end":1597,"line_start":52,"line_end":52,"column_start":43,"column_end":49,"is_primary":true,"text":[{"text":"        let mut resumable = self.0.lock().unwrap();","highlight_start":43,"highlight_end":49}],"label":"method not found in `MutexLockFuture<'_, bool>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `unwrap` found for struct `MutexLockFuture` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:52:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut resumable = self.0.lock().unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `MutexLockFuture<'_, bool>`\u001b[0m\n\n"}
{"message":"no method named `unwrap` found for struct `MutexLockFuture` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":1789,"byte_end":1795,"line_start":60,"line_end":60,"column_start":24,"column_end":30,"is_primary":true,"text":[{"text":"        *self.0.lock().unwrap() = true;","highlight_start":24,"highlight_end":30}],"label":"method not found in `MutexLockFuture<'_, bool>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `unwrap` found for struct `MutexLockFuture` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:60:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        *self.0.lock().unwrap() = true;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `MutexLockFuture<'_, bool>`\u001b[0m\n\n"}
{"message":"no method named `unwrap` found for struct `MutexLockFuture` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":3813,"byte_end":3819,"line_start":126,"line_end":126,"column_start":41,"column_end":47,"is_primary":true,"text":[{"text":"        let mut r = self.reactor.lock().unwrap();","highlight_start":41,"highlight_end":47}],"label":"method not found in `MutexLockFuture<'_, Box<Reactor>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `unwrap` found for struct `MutexLockFuture` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:126:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut r = self.reactor.lock().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `MutexLockFuture<'_, Box<Reactor>>`\u001b[0m\n\n"}
{"message":"the method `map` exists for struct `MutexLockFuture<'_, Box<Reactor>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":5442,"byte_end":5445,"line_start":177,"line_end":177,"column_start":44,"column_end":47,"is_primary":true,"text":[{"text":"                            reactor.lock().map(|mut r| r.wake(id)).unwrap();","highlight_start":44,"highlight_end":47}],"label":"method cannot be called on `MutexLockFuture<'_, Box<Reactor>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/mac/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.17/src/lock/mutex.rs","byte_start":5317,"byte_end":5358,"line_start":179,"line_end":179,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"pub struct MutexLockFuture<'a, T: ?Sized> {","highlight_start":1,"highlight_end":42}],"label":"doesn't satisfy `MutexLockFuture<'_, Box<Reactor>>: Iterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/mac/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.17/src/lock/mutex.rs","byte_start":5317,"byte_end":5358,"line_start":179,"line_end":179,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"pub struct MutexLockFuture<'a, T: ?Sized> {","highlight_start":1,"highlight_end":42}],"label":"doesn't satisfy `MutexLockFuture<'_, Box<Reactor>>: futures::Stream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/mac/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.17/src/lock/mutex.rs","byte_start":5317,"byte_end":5358,"line_start":179,"line_end":179,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"pub struct MutexLockFuture<'a, T: ?Sized> {","highlight_start":1,"highlight_end":42}],"label":"doesn't satisfy `_: tokio_stream::StreamExt`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\nwhich is required by `MutexLockFuture<'_, Box<Reactor>>: tokio_stream::StreamExt`\n`&MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\nwhich is required by `&MutexLockFuture<'_, Box<Reactor>>: tokio_stream::StreamExt`\n`&mut MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\nwhich is required by `&mut MutexLockFuture<'_, Box<Reactor>>: tokio_stream::StreamExt`\n`MutexLockFuture<'_, Box<Reactor>>: Iterator`\nwhich is required by `&mut MutexLockFuture<'_, Box<Reactor>>: Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait is implemented but not in scope; perhaps add a `use` for it:","code":null,"level":"help","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":"use futures::FutureExt;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `map` exists for struct `MutexLockFuture<'_, Box<Reactor>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:177:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   reactor.lock().map(|mut r| r.wake(id)).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `MutexLockFuture<'_, Box<Reactor>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/mac/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.17/src/lock/mutex.rs:179:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct MutexLockFuture<'a, T: ?Sized> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `MutexLockFuture<'_, Box<Reactor>>: Iterator`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: tokio_stream::StreamExt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\u001b[0m\n\u001b[0m            which is required by `MutexLockFuture<'_, Box<Reactor>>: tokio_stream::StreamExt`\u001b[0m\n\u001b[0m            `&MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\u001b[0m\n\u001b[0m            which is required by `&MutexLockFuture<'_, Box<Reactor>>: tokio_stream::StreamExt`\u001b[0m\n\u001b[0m            `&mut MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\u001b[0m\n\u001b[0m            which is required by `&mut MutexLockFuture<'_, Box<Reactor>>: tokio_stream::StreamExt`\u001b[0m\n\u001b[0m            `MutexLockFuture<'_, Box<Reactor>>: Iterator`\u001b[0m\n\u001b[0m            which is required by `&mut MutexLockFuture<'_, Box<Reactor>>: Iterator`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following trait is implemented but not in scope; perhaps add a `use` for it:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10muse futures::FutureExt;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"the method `map` exists for struct `MutexLockFuture<'_, Box<Reactor>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":5720,"byte_end":5723,"line_start":185,"line_end":185,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        reactor.lock().map(|mut r| r.handle = Some(handle)).unwrap();","highlight_start":24,"highlight_end":27}],"label":"method cannot be called on `MutexLockFuture<'_, Box<Reactor>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/mac/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.17/src/lock/mutex.rs","byte_start":5317,"byte_end":5358,"line_start":179,"line_end":179,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"pub struct MutexLockFuture<'a, T: ?Sized> {","highlight_start":1,"highlight_end":42}],"label":"doesn't satisfy `MutexLockFuture<'_, Box<Reactor>>: Iterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/mac/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.17/src/lock/mutex.rs","byte_start":5317,"byte_end":5358,"line_start":179,"line_end":179,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"pub struct MutexLockFuture<'a, T: ?Sized> {","highlight_start":1,"highlight_end":42}],"label":"doesn't satisfy `MutexLockFuture<'_, Box<Reactor>>: futures::Stream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/mac/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.17/src/lock/mutex.rs","byte_start":5317,"byte_end":5358,"line_start":179,"line_end":179,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"pub struct MutexLockFuture<'a, T: ?Sized> {","highlight_start":1,"highlight_end":42}],"label":"doesn't satisfy `_: tokio_stream::StreamExt`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\nwhich is required by `MutexLockFuture<'_, Box<Reactor>>: tokio_stream::StreamExt`\n`&MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\nwhich is required by `&MutexLockFuture<'_, Box<Reactor>>: tokio_stream::StreamExt`\n`&mut MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\nwhich is required by `&mut MutexLockFuture<'_, Box<Reactor>>: tokio_stream::StreamExt`\n`MutexLockFuture<'_, Box<Reactor>>: Iterator`\nwhich is required by `&mut MutexLockFuture<'_, Box<Reactor>>: Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait is implemented but not in scope; perhaps add a `use` for it:","code":null,"level":"help","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":"use futures::FutureExt;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `map` exists for struct `MutexLockFuture<'_, Box<Reactor>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:185:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        reactor.lock().map(|mut r| r.handle = Some(handle)).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `MutexLockFuture<'_, Box<Reactor>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/mac/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.17/src/lock/mutex.rs:179:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct MutexLockFuture<'a, T: ?Sized> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `MutexLockFuture<'_, Box<Reactor>>: Iterator`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: tokio_stream::StreamExt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\u001b[0m\n\u001b[0m            which is required by `MutexLockFuture<'_, Box<Reactor>>: tokio_stream::StreamExt`\u001b[0m\n\u001b[0m            `&MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\u001b[0m\n\u001b[0m            which is required by `&MutexLockFuture<'_, Box<Reactor>>: tokio_stream::StreamExt`\u001b[0m\n\u001b[0m            `&mut MutexLockFuture<'_, Box<Reactor>>: futures::Stream`\u001b[0m\n\u001b[0m            which is required by `&mut MutexLockFuture<'_, Box<Reactor>>: tokio_stream::StreamExt`\u001b[0m\n\u001b[0m            `MutexLockFuture<'_, Box<Reactor>>: Iterator`\u001b[0m\n\u001b[0m            which is required by `&mut MutexLockFuture<'_, Box<Reactor>>: Iterator`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following trait is implemented but not in scope; perhaps add a `use` for it:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10muse futures::FutureExt;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unused import: `tokio_stream::StreamExt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"rust_async/examples/future_runtime.rs","byte_start":93,"byte_end":116,"line_start":4,"line_end":4,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"use tokio_stream::StreamExt;","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `tokio_stream::StreamExt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust_async/examples/future_runtime.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse tokio_stream::StreamExt;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 11 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 11 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0252, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0252, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0252`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0252`.\u001b[0m\n"}
